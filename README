將資料讀入，利用CODE BASED的方式(Variable Length Pattern Run-Length)將資料進行壓縮。
資料進行切割後，判斷資料是否相容，若相容則將資料進行編碼儲存，若不相容調整切割範圍判斷，最小一路會調整到2X1時，必可切割。
最後會輸出壓縮率(=(原始資料bit數-壓縮過後bit數)/原始資料bit數)及壓縮再解壓縮後的檔案。

主要CODEWORD的架構：Length | Run | Pattern
Length：紀錄Run內的bit數。
Run：紀錄切割成幾等分。
Pattern：紀錄資料

範圍調整方式(設從8x8開始)：8x8 -> 7x8 -> 8x7 -> 7x7 -> ... -> 2x2 -> 2x1

舉例：
切割範圍：2x3 ->Length：2，Run：3
Pattern原先的內容為原資料的前6bit(2*3)，若相容則表示，Pattern的內容可以用2bit的資料，輸出3次表達->Pattern改成2bit資料。
設前6bit資料為1X1010
->切割成1X 10 10 -> X輸入0 -> 10 10 10 -> 相容 ->編碼儲存
設前6bit資料為1X1110
->切割成1X 11 10 -> X輸入1 -> 11 11 10 ->不相容 ->調整切割大小判斷(3x2) ->1x1 110 ->X輸入1 ->不相容 ->調整切割大小(2x2) ->1x 11 ->X輸入1 ->相容 ->編碼儲存

結論：
過小過大的切割範圍會導致壓縮率下降，不同電路適合的切割範圍也不同。
額外增設1bit去判讀是否有Inverse Pattern的效能不好，因為Inverse bit使用率過低，導致降低壓縮率。(註解的部分為Inverse bit使用的相關程式)
